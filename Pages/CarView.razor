@page "/{vin}"
@inject HttpClient Http;
@inject IJSRuntime JSRuntime

@if (Car != null)
{
    <div class="view ml-auto mr-auto">
        <img class="img-top" src="@Car.Path">
        <ul>
            <li class="list-group-item list-header">@Car.Name</li>
            <li class="list-group-item">Price: $@Car.Price.ToString("N0")</li>
            <li class="list-group-item">Mileage: @Car.MileageString</li>
            @if (Car.Series != null)
            {
                <li class="list-group-item">Series: @Car.Series</li>
            }
            <li class="list-group-item">VIN: @Car.VIN</li>
            @if (Car.IsSalvage)
            {
                <li class="list-group-item">Salvage Title</li>
            }
            @if (Car.DriveType != null)
            {
                <li class="list-group-item">Drive Type: @Car.DriveType</li>
            }
            <li class="list-group-item">Displacement: @Car.Displacement L</li>
            <li class="list-group-item">Number of Cylinders: @Car.NumCylinders</li>
            @if (Car.NumDoors != null)
            {
                <li class="list-group-item">Number of Doors: @Car.NumDoors</li>
            }
            @if (Car.FuelType != null)
            {
                <li class="list-group-item">Fuel Type: @Car.FuelType</li>
            }
        </ul>
    </div>
}
else
{

}


@functions {
    [Parameter]
    private string vin { get; set; }
    [CascadingParameter]
    private Car[] Cars { get; set; }
    private Car Car = null;
    private int index = -1;

    protected override void OnInit()
    {
        for (int i = 0; i < Cars.Length; i++)
        {
            if (Cars[i].VIN == vin)
            {
                Car = Cars[i];
                index = i;
                return;
            }
        }
    }

    protected override async Task OnInitAsync()
    {
        await JSRuntime.InvokeAsync<string>("scrollTo", 0, 0);
    }
}
